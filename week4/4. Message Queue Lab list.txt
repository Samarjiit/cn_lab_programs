Message Queue
1.Write a client server program using message queue to sort array of elements. 
Client takes input from user a set of integers and send to server using message 
queue for sorting. The server reads message queue and return sorted array to 
client for displaying at client.

2.Write a client server program using message queue to simulate calculator operations
 (+, -, *, / between two numbers). Client accepts two numbers and operation to be performed 
from the user and writes to message queue. Server reads from message queue and performs the 
required operation to produce result. The server returns the result to client using message 
queue in order to display result.

3.Write a client server program using message queue to cypher the text. 
Client take input a line of text from the user and sends to server using message Queue. 
Server reads text from the message queue and cypher the text (cypher method- simple one any of your choice) 
and return cyphered text to Client for display.

4. Write a client server program using message queue to book multiplex tickets. 
Assume that there are 5 ticket categories and each category there are 20 tickets. 
Assume that this is pre-stored information and available at server. From client program, 
User inputs- Name, Phone no, Ticket category and Number of tickets and pass it to server for 
ticket reservation. Depending on users input, decrement the number of seats in corresponding 
category, send booking information to client for displaying on the screen.


#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAXSIZE 50
struct msgbuf
{
    long mtype;
    int flag;
    int no, category, remain;
};

int main()
{
    int msqid;
    int msgflg = IPC_CREAT | 0666;
    key_t key;
    struct msgbuf sbuf;
    size_t buflen;

    key = 1234;

    if ((msqid = msgget(key, msgflg)) < 0) {
        printf("Message queue creation failed\n");
        return 1;
    }
        

    char name[20];
    int phone;
    sbuf.mtype = 1;
    sbuf.flag = 0;
    printf("Enter your name : ");
    scanf("%s", name);
    printf("Enter your phone number : ");
    scanf("%d", &phone);
    printf("Enter the ticket Category");
    printf("\n1.Comedy\n2.Horror\n3.Action\n4.Romance\n5.Drama\n");
    printf("Enter your choice : ");
    scanf("%d", &sbuf.category);
    printf("Enter the number of tickets : ");
    scanf("%d", &sbuf.no);
    int snd_byt = sizeof(sbuf) - sizeof(long);
    int num;
    if ((num = (msgsnd(msqid, &sbuf, snd_byt, IPC_NOWAIT))) < 0)
    {
        printf("Message Sending Failed\n");
        return 1;
    }
    else
    {
        printf("Message Sent to server\n");
    }

    struct msgbuf rbuf;
    int rcv_byt;
    int sizebyte_rcv = sizeof(rbuf) - sizeof(long);
    if ((rcv_byt = msgrcv(msqid, &rbuf, sizebyte_rcv, 2, 0)) < 0) {
        printf("Message Receiving Failed\n");
        return 1;
    }
        
    if (rbuf.flag == 1)
    {
        printf("Tickets not available\n");
    }

    else
    {
        printf("%d ticket booking successful under the name : %s\n", rbuf.no, name);
        printf("remaining tickets : %d\n", rbuf.remain);
        printf("\n");
    }
}



Server:
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAXSIZE 50
struct msgbuf
{
    long mtype;
    int flag;
    int no, category, remain;
};
int main()
{
    int msqid;
    key_t key;
    struct msgbuf rbuf;
    size_t buflen;
    int tickets[5][2] = {{1, 20}, {2, 20}, {3, 20}, {4, 20}, {5, 20}};
    key = 1234;
    if ((msqid = msgget(key, 0666 | IPC_CREAT)) < 0) {
        perror("msgget");
        exit(1);
    }

    printf("srever is running\n");
    int rcv_byt, k;
    int sizebyte_rcv = sizeof(rbuf) - sizeof(long);
    if ((rcv_byt = msgrcv(msqid, &rbuf, sizebyte_rcv, 1, 0)) < 0) {
        perror("msgrcv");
        exit(1);
    }
    printf("Message Received from client\n");
    printf("Category: %d\nRequest for booking:%d\n", rbuf.category, rbuf.no);    
    if (rbuf.no <= 20)
    {
        for (int i = 0; i < 5; i++)
        {
            if (rbuf.category == tickets[i][0])
            {
                tickets[i][1] -= rbuf.no;
                printf("Remainig tickets: %d\n", tickets[i][1]);
                rbuf.remain = tickets[i][1];
                break;
            }
        }
    }
    else
    {
        rbuf.flag = 1;
    }

    int snd_byt = sizeof(rbuf) - sizeof(long);
    int num;
    rbuf.mtype = 2;
    if ((num = (msgsnd(msqid, &rbuf, snd_byt, IPC_NOWAIT))) < 0)
    {
        perror("error in msgget");
    }
    else
    {
        printf("Message Sent to client\n");
    }

    return 0;
}



Output:

./client
Enter your name : raju
Enter your phone number : 9876543456
Enter the ticket Category
1.Comedy
2.Horror
3.Action
4.Romance
5.Drama
Enter your choice : 3
Enter the number of tickets : 10
Message Sent to server
10 ticket booking successful under the name : raju
remaining tickets : 10


gcc 4.ticket_client.c -o client
gcc 4.ticket_server.c -o server
./server
srever is running
Message Received from client
Category: 3
Request for booking:10
Remainig tickets: 10
Message Sent to client