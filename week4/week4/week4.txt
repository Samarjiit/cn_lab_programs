prg1:
client:
#include<stdio.h>
#include<sys/types.h>
#include<sys/ipc.h>
#include<sys/msg.h>
#include<stdlib.h>
struct Array
{
int arr[100];
int n;
}a;
struct msg_Buffer
{
long msg_type;
struct Array a;
//char msg_text[a.n];
}message;
void main(){
key_t key;
int msgid;
// key = ftok("array_sort",65);
key = 1001;
msgid = msgget(key,0666|IPC_CREAT);
message.msg_type = 1;
printf("\nWritting Data : ");
printf("\nEnter the size of the array : ");
scanf("%d",&message.a.n);
//int arr[n];
printf("\nEnter the array elements: ");
for(int i=0;i<message.a.n;i++){
scanf("%d",&message.a.arr[i]);
}
printf("\nArray: ");
for(int i=0;i<message.a.n;i++){
printf("%d ",message.a.arr[i]);
}
//fgets(message.msg_text,message.a.n,stdin);
msgsnd(msgid,&message,sizeof(message),0);
printf("\nData sent successfully");
key = 1002;
msgid = msgget(key,0666|IPC_CREAT);
message.msg_type = 1;
msgrcv(msgid,&message,sizeof(message),1,0);
printf("\nSorted Array: ");
for(int i=0;i<message.a.n;i++){
printf("%d ",message.a.arr[i]);
}
msgctl(msgid, IPC_RMID, NULL);
}
------------------------------
server:
#include<stdio.h>
#include<sys/types.h>
#include<sys/ipc.h>
#include<sys/msg.h>
#include<stdlib.h>





struct Array
{
int arr[100];
int n;
}a;





struct msg_Buffer
{
long msg_type;
struct Array a;
}message;





int main()
{
key_t key;
int msgid;
key = 1001;





msgid = msgget(key,0666|IPC_CREAT);
message.msg_type = 1;
msgrcv(msgid,&message,sizeof(message),1,0);



printf("\nArray: ");
for(int i=0;i<message.a.n;i++){
printf("%d ",message.a.arr[i]);
}





printf("\nSorting ....");





int temp;
int i,j;
for(i=0;i<message.a.n-1;i++){
for(j=i+1;j<message.a.n;j++){
if(message.a.arr[i] > message.a.arr[j]){
temp = message.a.arr[i];
message.a.arr[i] = message.a.arr[j];
message.a.arr[j] = temp;
}
}
}
printf("\nArray: ");
for(int i=0;i<message.a.n;i++){
printf("%d ",message.a.arr[i]);
}
msgctl(msgid, IPC_RMID, NULL);






key = 1002;
msgid = msgget(key,0666|IPC_CREAT);
message.msg_type = 1;
msgsnd(msgid,&message,sizeof(message),0);
printf("\nSorted Array Sent ");
return 0;
}
-------------
-------------
mca@MCALAB2-18:~/200970079/week4$ gcc prg1_c.c -o prg1_c
mca@MCALAB2-18:~/200970079/week4$ gcc prg1_s.c -o prg1_s
mca@MCALAB2-18:~/200970079/week4$ ./prg1_c





Writting Data :
Enter the size of the array : 3





Enter the array elements: 5 9 10





Array: 5 9 10
Data sent successfully
Sorted Array: 5 9 10





terml2:
mca@MCALAB2-18:~/200970079/week4$ ./prg1_s





Array: 5 9 10
Sorting ....
Array: 5 9 10
Sorted Array Sent
************************
prg2:
client:
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
struct msgbuf
{
long mtype;
float num[3];
char op;
};
int main()
{
struct msgbuf buf;
int len=sizeof(buf)-sizeof(long);
int msqid = msgget(1234,IPC_CREAT|0777);
buf.mtype=1;
printf("Enter Two numbers \n");
scanf("%f",&buf.num[0]);
scanf("%f",&buf.num[1]);
printf("Enter operator\n");
scanf("%s",&buf.op);
if (msgsnd(msqid, &buf, len, IPC_NOWAIT)>=0)
printf("Message Sent\n");
float ans;
msgrcv(msqid, &buf,len, 2, 0);
printf("%f ",buf.num[3]);
msgctl(msqid,IPC_RMID,0);
return 1;
}
--------------
server:
#include<stdio.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <string.h>
#include <stdlib.h>
struct msgbuf
{
long mtype;
float num[3];
char op;
};
int main()
{
int n,msqid;
struct msgbuf buf;
int len=sizeof(buf)-sizeof(long);
buf.mtype=1;
msqid = msgget(1234, 0666);
msgrcv(msqid, &buf,len, 1, 0);
float a=buf.num[0],b=buf.num[1],ans;
char c=buf.op;
switch(c)
{
case '+': ans=a+b;
break;
case '-': ans=a-b;
break;
case '*': ans=a*b;
break;
case '/': ans=a/b;
break;
}
buf.num[3]=ans;
buf.mtype=2;
printf("%f%c%f=%f\n",a,c,b,ans);
if (msgsnd(msqid, &buf, len, IPC_NOWAIT)>=0)
printf("Message Sent\n");
return 0;
}
---------------------
-------------------------
trml1:
mca@MCALAB2-18:~/200970079/week4$ gcc prg2_c.c -o prg2_c
mca@MCALAB2-18:~/200970079/week4$ gcc prg2_s.c -o prg2_s
mca@MCALAB2-18:~/200970079/week4$ ./prg2_c
Enter Two numbers
6
10
Enter operator
*
Message Sent
60.000000





trml2:
mca@MCALAB2-18:~/200970079/week4$ ./prg2_s
6.000000*10.000000=60.000000
Message Sent
***************************
prg3:
client:
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
struct msgbuf
{
long mtype;
char text[100];
};
int main()
{
char temp[100];
struct msgbuf buf;
int len=sizeof(buf)-sizeof(long);
int msqid = msgget(1234,IPC_CREAT|0777);
buf.mtype=1;
printf("Enter text\n");
scanf("%s",&buf.text[0]);
if (msgsnd(msqid, &buf, len, IPC_NOWAIT)>=0)
printf("Message Sent\n");
msgrcv(msqid, &buf,len,2, 0);
printf("%s \n",buf.text);
msgctl(msqid,IPC_RMID,0);
return 1;
}
-----------------
server:
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
struct msgbuf
{
long mtype;
char text[100];
};
int main()
{
int msqid;
char temp[100]="";
struct msgbuf buf;
int len=sizeof(buf)-sizeof(long);
buf.mtype=1;
msqid = msgget(1234, 0666);
msgrcv(msqid, &buf,len, 1, 0);
for(int i=0;buf.text[i]!='\0';i++)
temp[i]=buf.text[i]+1;
printf("%s %s\n",buf.text,temp);
strcpy(buf.text,temp);
buf.mtype=2;
if (msgsnd(msqid, &buf,len, IPC_NOWAIT)>=0)
printf("Message Sent\n");
return 0;
}
---------------------
trml1:
mca@MCALAB2-18:~/200970079/week4$ gcc prg3_c.c -o prg3_c
mca@MCALAB2-18:~/200970079/week4$ gcc prg3_s.c -o prg3_s
mca@MCALAB2-18:~/200970079/week4$ ./prg3_c
Enter text
abc
Message Sent
bcd
mca@MCALAB2-18:~/200970079/week4$ ./prg3_c
Enter text
aba
Message Sent
bcb





trml2:
mca@MCALAB2-18:~/200970079/week4$ ./prg3_s
abc bcd
Message Sent
mca@MCALAB2-18:~/200970079/week4$ ./prg3_s
aba bcb
Message Sent





prg4_c.c
................
#include<sys/types.h>
#include<sys/ipc.h>
#include<sys/msg.h>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MAXSIZE 50



void die(char *s)
{
perror(s);
exit(1);
}



struct msgbuf{
long mtype;
int flag;
int no,category;
};



int main()
{
int msqid;
int msgflg= IPC_CREAT | 0666;
key_t key;
struct msgbuf sbuf;
size_t buflen;



key =104;



if((msqid= msgget(key,msgflg))<0)
die("msgget");

char name[20];
int phone;
sbuf.mtype=1;
sbuf.flag=0;
printf(" msqid %d \n",msqid);
printf("Enter your name : ");
scanf("%[^\n]",name);
printf("\nEnter your phone number : ");
scanf("%d",&phone);
printf("\nEnter the ticket Category");
printf("\n1.Comedy\n2.Horror\n3.Romance\n4.Thriller\n5.Suspense");
printf("\nEnter your choice : ");
scanf("%d",&sbuf.category);
printf("\nEnter the number of tickets : ");
scanf("%d",&sbuf.no);
printf("dfsd : %d",sbuf.no);
int snd_byt=sizeof(sbuf)-sizeof(long);
int num;
if((num=(msgsnd(msqid,&sbuf,snd_byt, IPC_NOWAIT) ))<0 )
{
die("msgget");
}
else
{
printf("Message Sent\n");
printf("%d",num);
//die("msgget");
}



struct msgbuf rbuf;
int rcv_byt;
int sizebyte_rcv=sizeof(rbuf)-sizeof(long);
if((rcv_byt=msgrcv(msqid,&rbuf,sizebyte_rcv,2,0) )<0 )
die("msgrcv");

printf("received byte %d %d\n",rcv_byt,sizebyte_rcv);
if(rbuf.flag==1)
{
    printf("Tickets not available");
}
else
{
    printf("%d ticket booking successful under the name : %s",rbuf.no,name); 
}

}


prg4_s.c
................
#include<sys/types.h>
#include<sys/ipc.h>
#include<sys/msg.h>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MAXSIZE 50
void die(char *s)
{
perror(s);
exit(1);
}
struct msgbuf
{
long mtype;
int flag;
int no,category;
};
int main()
{
int msqid;
key_t key;
struct msgbuf rbuf;
size_t buflen;
int tickets[5][2]={{1,20},{2,20},{3,20},{4,20},{5,20}};
key =104;
if((msqid= msgget(key,0666|IPC_CREAT))<0)
die("msgget()");
printf(" msqid %d \n",msqid);
int rcv_byt,k;
int sizebyte_rcv=sizeof(rbuf)-sizeof(long);
if((rcv_byt=msgrcv(msqid,&rbuf,sizebyte_rcv,1,0) )<0 )
die("msgrcv");
printf("%d %d",rbuf.no,rbuf.category);
 
if(rbuf.no<=20)
{
for(int i=0;i<5;i++)
{
 if(rbuf.category==tickets[i][0])
 {
 tickets[i][1]-=rbuf.no;
 //rbuf.flag=1;
 break;
 }
}
}
else
{
rbuf.flag=1;
}
printf(" received byte %d %d\n",rcv_byt,sizebyte_rcv);
 
//sending back
int snd_byt=sizeof(rbuf)-sizeof(long);
int num;
rbuf.mtype=2;
if((num=(msgsnd(msqid,&rbuf,snd_byt, IPC_NOWAIT) ))<0 )
{
die("msgget");
}
else
{
printf("\nMessage Sent\n");
printf("%d",num);
}
 
return 0;
}
